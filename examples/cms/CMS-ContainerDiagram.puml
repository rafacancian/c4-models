@startuml CMS
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FA5 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/postgresql.puml
!include DEVICONS/django.puml
!include DEVICONS/python.puml
!include DEVICONS/aws.puml
!include FA5/mobile_alt.puml


title Diagrama de contêineres do Sistema de Gerenciamento de Conteúdo


SHOW_PERSON_PORTRAIT()
LAYOUT_LEFT_RIGHT()

AddRelTag("async", $lineStyle = DashedLine())
Person(leitor, "Leitor", "Pessoa que consome as notícias do site.")
Person(editor, "Editor", "Pessoa que escreve conteúdo para o site.")
System_Boundary(cms, "Sistema de gerenciamento de conteúdo"){
    Container(portal, "Portal de Notícias", "Python e Django",  "Site que fornece as notícias e conteúdos. Possui área acessível somente para editores.", $sprite = "django")
    ContainerDb(db, "Banco de dados", "PostgresSQL", "Armazena notícias e informações sobre usuários.", $sprite="postgresql")
    Container(files, "Armazenamento de imagens", "Bucket S3", "Armazena imagens que serão utilizadas nas notícias e no conteúdo do portal.", $sprite="aws")
    Container(mobile, "Aplicativo móvel", "Android / IOS", "Aplicativo que permite o acesso ao conteúdo e às notícias do portal.", $sprite="mobile_alt")
    ContainerQueue(queue, "Fila de processamento em segundo plano", "RabbitMQ", "Recebe eventos de criação de imagem para serem consumidos pelo processador.")
    Rel_R(mobile, portal, "Consome conteúdos e notícias através de API utilizando", "HTTPS/JSON")
    Rel(portal, db, "Lê e escreve em", "PostgreSQL protocol")
    Rel(portal, files, "Escreve e consome imagens do")
    Container(worker, "Processador de imagens", "Python", "Processa imagens otimizando-as e gerando thumbnails.", $sprite="python")
    Rel(portal, queue, "Envia evento de adição de nova imagem para", "amqp", $tags = "async")
    Rel_U(worker, queue, "Consome eventos de", $tags = "async")
    Rel(worker, files, "Escreve imagens em")
    Rel(leitor, files, "Consome conteúdo estático de")
    Rel(editor, files, "Consome conteúdo estático")
}
Rel(leitor, portal, "Consome notícias e conteúdo em", "HTTPS")
Rel(leitor, mobile, "Consome notícias e conteúdo em", "HTTPS")
Rel(editor, portal, "Escreve conteúdo em", "HTTPS")
@enduml